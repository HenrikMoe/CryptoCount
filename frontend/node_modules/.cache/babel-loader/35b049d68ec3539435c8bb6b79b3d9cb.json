{"ast":null,"code":"const baseURL = \"http://localhost:3001/\";\nconst headers = new Headers();\nvar sessionId; // Orderly interface to the REST server, providing:\n// 1. Standard URL base\n// 2. Standard headers to manage CORS and content type\n// 3. Guarantee that 4xx and 5xx results are returned as\n//    rejected promises, with a payload comprising an\n//    array of user-readable strings describing the error.\n// 4. All successful post operations return promises that\n//    resolve to a JS object representing the newly added\n//    entity (all fields, not just those in the post body)\n//    The only exception is Prss POST which cannot do this\n//    due to login requirements.  Prss POST does the best\n//    it can by returning the object it just added, augmented\n//    with the proper ID.\n// 5. Signin and signout operations that retain relevant\n//    sessionId data.  Successful signin returns promise\n//    resolving to newly signed in user.\n\nheaders.set(\"Content-Type\", \"application/JSON\");\nconst reqConf = {\n  headers: headers,\n  credentials: \"include\"\n};\n\nfunction safeFetch(method, endpoint, body) {\n  return fetch(baseURL + endpoint, {\n    method: method,\n    body: JSON.stringify(body),\n    ...reqConf\n  }).catch(function (response) {\n    return Promise.reject([{\n      tag: \"UnRespServer\"\n    }]);\n  }).then(function (response) {\n    if (response.status === 400) {\n      return response.json().then(function (response) {\n        return Promise.reject(response);\n      });\n    } else if (response.status === 401) {\n      return Promise.reject([{\n        tag: \"Unauthorized\"\n      }]);\n    } else if (response.status === 403) return Promise.reject([{\n      tag: \"Forbidden\"\n    }]);else if (response.status === 500) return Promise.reject([{\n      tag: \"Internal\"\n    }]);else return Promise.resolve(response);\n  });\n}\n\nexport function post(endpoint, body) {\n  return safeFetch(\"POST\", endpoint, body);\n}\nexport function put(endpoint, body) {\n  return safeFetch(\"PUT\", endpoint, body);\n}\nexport function get(endpoint, body) {\n  return safeFetch(\"GET\", endpoint, body);\n}\nexport function del(endpoint, body) {\n  return safeFetch(\"DELETE\", endpoint, body);\n} // Functions for performing the api requests\n\n/**\n * Sign a user into the service, returning a promise of the\n * user token\n * @param {{email: string, password: string}} cred\n */\n\nexport function signIn(cred) {\n  return post(\"Ssns\", cred).then(response => {\n    let location = response.headers.get(\"Location\").split(\"/\");\n    sessionId = location[location.length - 1];\n    return get(\"Ssns/\" + sessionId);\n  }).then(response => response.json()) // ..json() returns a Promise!\n  .then(body => get(\"Prss/\" + body.prsId)).then(userResponse => userResponse.json()).then(rsp => rsp);\n}\n/**\n * @returns {Promise} result of the sign out request\n */\n\nexport function signOut() {\n  return del(\"Ssns/\" + sessionId);\n}\n/**\n * Register a user\n * @param {Object} user\n * @returns {Promise resolving to new user}\n */\n\nexport function register(user) {\n  return post(\"Prss\", user);\n}\nexport function analPost(params) {\n  console.log(params);\n  return post(\"Anal/\", {\n    address: params[\"address\"],\n    basisDate: params[\"basisDate\"],\n    fiat: params[\"fiat\"]\n  });\n}\nexport function getCalendarData(params) {\n  return post(\"Anal/Cal\", {\n    address: params[\"address\"],\n    fiat: params[\"fiat\"]\n  });\n}\nconst errMap = {\n  Internal: \"An Internal Server Error Occurred\",\n  Forbidden: \"You are Forbidden from Viewing the Requested Page\",\n  Unauthorized: \"You are Unauthorized to View the Requested Page\",\n  UnRespServer: \"The Server is Likely Down\",\n  missingField: \"Field missing from request: \",\n  badValue: \"Field has bad value: \",\n  notFound: \"Entity not present in DB\",\n  badLogin: \"Email/password combination invalid\",\n  dupEmail: \"Email duplicates an existing email\",\n  noTerms: \"Acceptance of terms is required\",\n  forbiddenRole: \"Role specified is not permitted.\",\n  noOldPwd: \"Change of password requires an old password\",\n  oldPwdMismatch: \"Old password that was provided is incorrect.\",\n  dupTitle: \"Conversation title duplicates an existing one\",\n  dupEnrollment: \"Duplicate enrollment\",\n  forbiddenField: \"Field in body not allowed.\",\n  queryFailed: \"Query failed (server problem).\"\n};\n/**\n * @param {string} errTag\n * @param {string} lang\n */\n\nexport function errorTranslate(errTag) {\n  return errMap[errTag] || \"Unknown Error!\";\n}","map":{"version":3,"sources":["/Users/chase/Desktop/CryptoProjects/CryptoCount-v2/frontend/src/api.js"],"names":["baseURL","headers","Headers","sessionId","set","reqConf","credentials","safeFetch","method","endpoint","body","fetch","JSON","stringify","catch","response","Promise","reject","tag","then","status","json","resolve","post","put","get","del","signIn","cred","location","split","length","prsId","userResponse","rsp","signOut","register","user","analPost","params","console","log","address","basisDate","fiat","getCalendarData","errMap","Internal","Forbidden","Unauthorized","UnRespServer","missingField","badValue","notFound","badLogin","dupEmail","noTerms","forbiddenRole","noOldPwd","oldPwdMismatch","dupTitle","dupEnrollment","forbiddenField","queryFailed","errorTranslate","errTag"],"mappings":"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","sourcesContent":["const baseURL = \"http://localhost:3001/\";\nconst headers = new Headers();\nvar sessionId;\n\n// Orderly interface to the REST server, providing:\n// 1. Standard URL base\n// 2. Standard headers to manage CORS and content type\n// 3. Guarantee that 4xx and 5xx results are returned as\n//    rejected promises, with a payload comprising an\n//    array of user-readable strings describing the error.\n// 4. All successful post operations return promises that\n//    resolve to a JS object representing the newly added\n//    entity (all fields, not just those in the post body)\n//    The only exception is Prss POST which cannot do this\n//    due to login requirements.  Prss POST does the best\n//    it can by returning the object it just added, augmented\n//    with the proper ID.\n// 5. Signin and signout operations that retain relevant\n//    sessionId data.  Successful signin returns promise\n//    resolving to newly signed in user.\nheaders.set(\"Content-Type\", \"application/JSON\");\n\nconst reqConf = {\n\theaders: headers,\n\tcredentials: \"include\",\n};\n\nfunction safeFetch(method, endpoint, body) {\n\treturn fetch(baseURL + endpoint, {\n\t\tmethod: method,\n\t\tbody: JSON.stringify(body),\n\t\t...reqConf,\n\t})\n\t\t.catch(function (response) {\n\t\t\treturn Promise.reject([{ tag: \"UnRespServer\" }]);\n\t\t})\n\t\t.then(function (response) {\n\t\t\tif (response.status === 400) {\n\t\t\t\treturn response.json().then(function (response) {\n\t\t\t\t\treturn Promise.reject(response);\n\t\t\t\t});\n\t\t\t} else if (response.status === 401) {\n\t\t\t\treturn Promise.reject([{ tag: \"Unauthorized\" }]);\n\t\t\t} else if (response.status === 403)\n\t\t\t\treturn Promise.reject([{ tag: \"Forbidden\" }]);\n\t\t\telse if (response.status === 500)\n\t\t\t\treturn Promise.reject([{ tag: \"Internal\" }]);\n\t\t\telse return Promise.resolve(response);\n\t\t});\n}\n\nexport function post(endpoint, body) {\n\treturn safeFetch(\"POST\", endpoint, body);\n}\n\nexport function put(endpoint, body) {\n\treturn safeFetch(\"PUT\", endpoint, body);\n}\n\nexport function get(endpoint, body) {\n\treturn safeFetch(\"GET\", endpoint, body);\n}\n\nexport function del(endpoint, body) {\n\treturn safeFetch(\"DELETE\", endpoint, body);\n}\n\n// Functions for performing the api requests\n\n/**\n * Sign a user into the service, returning a promise of the\n * user token\n * @param {{email: string, password: string}} cred\n */\n\nexport function signIn(cred) {\n\treturn post(\"Ssns\", cred)\n\t\t.then((response) => {\n\t\t\tlet location = response.headers.get(\"Location\").split(\"/\");\n\t\t\tsessionId = location[location.length - 1];\n\t\t\treturn get(\"Ssns/\" + sessionId);\n\t\t})\n\t\t.then((response) => response.json()) // ..json() returns a Promise!\n\t\t.then((body) => get(\"Prss/\" + body.prsId))\n\t\t.then((userResponse) => userResponse.json())\n\t\t.then((rsp) => rsp);\n}\n\n/**\n * @returns {Promise} result of the sign out request\n */\nexport function signOut() {\n\treturn del(\"Ssns/\" + sessionId);\n}\n\n/**\n * Register a user\n * @param {Object} user\n * @returns {Promise resolving to new user}\n */\nexport function register(user) {\n\treturn post(\"Prss\", user);\n}\n\nexport function analPost(params) {\n\tconsole.log(params);\n\treturn post(\"Anal/\", {\n\t\taddress: params[\"address\"],\n\t\tbasisDate: params[\"basisDate\"],\n\t\tfiat: params[\"fiat\"],\n\t});\n}\n\nexport function getCalendarData(params) {\n\treturn post(\"Anal/Cal\", {\n\t\taddress: params[\"address\"],\n\t\tfiat: params[\"fiat\"],\n\t});\n}\n\nconst errMap = {\n\tInternal: \"An Internal Server Error Occurred\",\n\tForbidden: \"You are Forbidden from Viewing the Requested Page\",\n\tUnauthorized: \"You are Unauthorized to View the Requested Page\",\n\tUnRespServer: \"The Server is Likely Down\",\n\tmissingField: \"Field missing from request: \",\n\tbadValue: \"Field has bad value: \",\n\tnotFound: \"Entity not present in DB\",\n\tbadLogin: \"Email/password combination invalid\",\n\tdupEmail: \"Email duplicates an existing email\",\n\tnoTerms: \"Acceptance of terms is required\",\n\tforbiddenRole: \"Role specified is not permitted.\",\n\tnoOldPwd: \"Change of password requires an old password\",\n\toldPwdMismatch: \"Old password that was provided is incorrect.\",\n\tdupTitle: \"Conversation title duplicates an existing one\",\n\tdupEnrollment: \"Duplicate enrollment\",\n\tforbiddenField: \"Field in body not allowed.\",\n\tqueryFailed: \"Query failed (server problem).\",\n};\n\n/**\n * @param {string} errTag\n * @param {string} lang\n */\nexport function errorTranslate(errTag) {\n\treturn errMap[errTag] || \"Unknown Error!\";\n}\n"]},"metadata":{},"sourceType":"module"}